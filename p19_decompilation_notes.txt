0: IP += 16
17: reg[1] += 2
18: reg[1] = reg[1] * reg[1]
19: reg[1] = reg[3] (IP) * reg[1]
20: reg[1] *= 11
21: reg[2] += 4
22: reg[2] = reg[2] * reg[3]
23: reg[2] = reg[2] + 19
24: reg[1] = reg[2] + reg[1]
25: reg[3] = reg[3] + reg[0]   #
26: IP = 1
....

1: reg[5] = 1
2: reg[4] = 1
---
# for the small case
# r5 = 1; r4 = 1; r1 = 943, loop


# for the giant case
# r5 = 1
# r4 = 1
# r1 = 10551343
# loop:
# if r5 * r4 == r1:
#     r0 += r5
# r4 += 1
# if r4 > r1:
#     r5++
# if r5 > r1:
#     exit()
# goto loop

0: addi 3 16 3
1: seti 1 8 5
2: seti 1 0 4
3: mulr 5 4 2
4: eqrr 2 1 2
5: addr 2 3 3
6: addi 3 1 3
7: addr 5 0 0
8: addi 4 1 4
9: gtrr 4 1 2
10: addr 3 2 3
11: seti 2 3 3
12: addi 5 1 5
13: gtrr 5 1 2
14: addr 2 3 3
15: seti 1 4 3
16: mulr 3 3 3
17: addi 1 2 1
18: mulr 1 1 1
mulr 3 1 1
muli 1 11 1
addi 2 4 2
mulr 2 3 2
addi 2 19 2
addr 1 2 1
addr 3 0 3
seti 0 7 3
setr 3 2 2
mulr 2 3 2
addr 3 2 2
mulr 3 2 2
muli 2 14 2
mulr 2 3 2
addr 1 2 1
seti 0 1 0
seti 0 5 3



3: reg[2] = reg[5] * reg[4]
4: reg[2] = reg[2] == reg[1]   # if reg[5] * reg[4] == reg[1] ...
5: reg[3] = reg[2] + reg[3]   (no change, reg[2] was 0 since no equality)
6: reg[3] = reg[3] + 1       (skip instruction 7 which was addr 5 0 0,
                              i.e reg[0] += reg[5])



8: reg[4]++
9: reg[2] = reg[4] > reg[1]   (right now that's 3 > 10551343, lol)
10: reg[3] = reg[3] + reg[2]  (so if it was greater, we would skip and go to instr 12)
11: reg[3] = 2  (so execute instruction 3 in a loop)

--------------------
12: reg[5]++                        addi 5 1 5
13: reg[2] = reg[5] > reg[1]        gtrr 5 1 2   if reg[5] > reg[1] the program ends.
14: reg[3] = reg[2] + reg[3]        addr 2 3 3   END THE PROGRAM (skip to 16) if reg[2] is 1
15: reg[3] = 1                      seti 1 4 3   GO BACK TO BEG
16: reg[3] = reg[3] * reg[3]  mulr 3 3 3   ???   OH THIS ESCAPES THE PROG.