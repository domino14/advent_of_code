0: seti 123 0 1                # r1 = 123
1: bani 1 456 1                # r1 = r1 & 456   (should be 72)
2: eqri 1 72 1                 # r1 = r1 == 72   (r1 should be 1)
3: addr 1 4 4                  # r4 (ip) = r1 + r4 (it's 1, so skip to 5)
4: seti 0 0 4                  # r4 (ip) = 0  -- DOES NOT EXECUTE

5: seti 0 3 1                  # r1 = 0

6: bori 1 65536 5              # r5 = r1 | 65536   (should be 65536)
7: seti 8586263 3 1            # r1 = 8586263

8: bani 5 255 2                # r2 = r5 & 255     (should be 0)
9: addr 1 2 1                  # r1 = r1 + r2   (r1 should remain big number)
10: bani 1 16777215 1          # r1 = r1 & 16777215 (2^24-1)  (r1 stays same)
11: muli 1 65899 1             # r1 = r1 * 65899  (565826145437)
12: bani 1 16777215 1          # r1 = r1 & 16777215  (14535837)
13: gtir 256 5 2               # r2 = 256 > r5   (0)
14: addr 2 4 4                 # r4(ip) = r2 + r4  (don't skip)
15: addi 4 1 4                 # r4(ip) = r4 + 1
16: seti 27 8 4                # r4(ip) = 27  (basically skip to inst 28)
17: seti 0 1 2                 # r2 = 0

18: addi 2 1 3                 # r3 = r2 + 1         (r3 = 1)
19: muli 3 256 3               # r3 = r3 * 256       (256)
20: gtrr 3 5 3                 # r3 = r3 > r5        (false, 0)
21: addr 3 4 4                 # r4 (ip) = r3 + r4   (don't skip)
22: addi 4 1 4                 # r4 (ip) = r4 + 1    (skip 23)
23: seti 25 8 4                # r4 (ip) = 25        (skip to inst 26)
24: addi 2 1 2                 # r2 = r2 + 1         (r2 = 1)
25: seti 17 7 4                # r4 = 17             (skip to inst 18)

26: setr 2 0 5                # r5 = r2
27: seti 7 8 4                # r4(ip) = 7              (inst 8)

28: eqrr 1 0 2                # r2 = (r1 == r0)
29: addr 2 4 4                # r4(ip) = r2 + r4   EXIT PROGRAM if r1 == r0
30: seti 5 4 4                # otherwise r4(ip) = 5  (skip to inst 6)